#!/usr/bin/env python3
"""
Candidate Model
"""
from sqlalchemy import String, Uuid, ForeignKey, DateTime, Interval
from sqlalchemy.orm import Mapped, mapped_column, validates
from api.models import db_engine
from datetime import datetime, timedelta

db = db_engine


class Exam(db.Model):
    """
        Exam Model
        Fields:
            title: title of the exam
            token: token generated by Admin to be used by candidate
            question: exam question
            answer: answer to exam question
    """
    title: Mapped[str] = mapped_column(String, unique=True, nullable=False)
    token: Mapped[str] = mapped_column(String, nullable=False)
    scheduled_time = Mapped[str] = mapped_column(DateTime, default=datetime.now+timedelta(days=3))
    exam_time =  Mapped[str] = mapped_column(Interval)
    question: Mapped[str] = mapped_column(String, nullable=False)
    answer: Mapped[str] = mapped_column(String, nullable=False)
    admin_id: Mapped[str] = mapped_column(Uuid, ForeignKey('admin.id'), nullable=False)

    @validates('title')
    def validate_title(self, key, title):
        if not title:
            raise AssertionError('No title provided')
        if len(title) < 5 or len(title) > 30:
            raise AssertionError('title must be between 5 and 30 characters')
        return title
    
    @validates('question')
    def validate_question(self, key, question):
        if not question:
            raise AssertionError('No question provided')
        return question

    @validates('answer')
    def validate_answer(self, key, answer):
        if not answer:
            raise AssertionError('No answer provided')
        return answer
        
    def to_json(cls):
        return {
            'exam_id': str(cls.id),
            'admin_id': str(cls.admin_id),
            'title': cls.title,
            'question': cls.question,
            'answer': cls.answer,
            'created_at': str(cls.created_at),
            'updated_at': str(cls.updated_at)
        }
